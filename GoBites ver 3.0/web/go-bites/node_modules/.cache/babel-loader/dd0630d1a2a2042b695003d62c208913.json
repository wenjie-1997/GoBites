{"remainingRequest":"/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/node_modules/babel-loader/lib/index.js!/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/node_modules/eslint-loader/index.js??ref--13-0!/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/src/store/modules/customerUser.js","dependencies":[{"path":"/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/src/store/modules/customerUser.js","mtime":1607665803542},{"path":"/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS9waGFydmVpc2gvZ29CaXRlcy9zcHJpbnQyL0ZsdXR0ZXJfQXBwX0dvQml0ZXMvR29CaXRlcyB2ZXIgMi4wL3dlYi9nby1iaXRlcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkiOwppbXBvcnQgeyBTRVRfQ1VTVE9NRVJfVVNFUl9TVEFURSB9IGZyb20gIi4uL2FjdGlvbnMvY3VzdG9tZXJVc2VyIjsKdmFyIHN0YXRlID0gewogIHBlcnNvbklkOiAwLAogIGN1c3RvbWVySWQ6IDAsCiAgdXNlck5hbWU6ICIiCn07CnZhciBnZXR0ZXJzID0gewogIGdldEN1c3RvbWVySWQ6IGZ1bmN0aW9uIGdldEN1c3RvbWVySWQoc3RhdGUpIHsKICAgIHJldHVybiBzdGF0ZS5jdXN0b21lcklkOwogIH0sCiAgZ2V0Q3VzdG9tZXJQZXJzb25JZDogZnVuY3Rpb24gZ2V0Q3VzdG9tZXJQZXJzb25JZChzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnBlcnNvbklkOwogIH0sCiAgZ2V0Q3VzdG9tZXJVc2VyTmFtZTogZnVuY3Rpb24gZ2V0Q3VzdG9tZXJVc2VyTmFtZShzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnVzZXJOYW1lOwogIH0KfTsKCnZhciBhY3Rpb25zID0gX2RlZmluZVByb3BlcnR5KHt9LCBTRVRfQ1VTVE9NRVJfVVNFUl9TVEFURSwgZnVuY3Rpb24gKF9yZWYsIGN1c3RvbWVyVXNlcikgewogIHZhciBjb21taXQgPSBfcmVmLmNvbW1pdDsKICBjb21taXQoU0VUX0NVU1RPTUVSX1VTRVJfU1RBVEUsIGN1c3RvbWVyVXNlcik7Cn0pOwoKdmFyIG11dGF0aW9ucyA9IF9kZWZpbmVQcm9wZXJ0eSh7fSwgU0VUX0NVU1RPTUVSX1VTRVJfU1RBVEUsIGZ1bmN0aW9uIChzdGF0ZSwgY3VzdG9tZXJVc2VyKSB7CiAgc3RhdGUudXNlcklkID0gY3VzdG9tZXJVc2VyLmN1c3RvbWVyLmlkOwogIHN0YXRlLnVzZXJUeXBlID0gY3VzdG9tZXJVc2VyLnBlcnNvbklkOwogIHN0YXRlLnVzZXJOYW1lID0gY3VzdG9tZXJVc2VyLnVzZXJOYW1lOwp9KTsKCmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBhY3Rpb25zOiBhY3Rpb25zLAogIG11dGF0aW9uczogbXV0YXRpb25zCn07"},{"version":3,"sources":["/home/pharveish/goBites/sprint2/Flutter_App_GoBites/GoBites ver 2.0/web/go-bites/src/store/modules/customerUser.js"],"names":["SET_CUSTOMER_USER_STATE","state","personId","customerId","userName","getters","getCustomerId","getCustomerPersonId","getCustomerUserName","actions","customerUser","commit","mutations","userId","customer","id","userType"],"mappings":";AAAA,SACIA,uBADJ,QAEO,yBAFP;AAIA,IAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,CADA;AAEVC,EAAAA,UAAU,EAAE,CAFF;AAGVC,EAAAA,QAAQ,EAAE;AAHA,CAAd;AAMA,IAAMC,OAAO,GAAG;AACZC,EAAAA,aAAa,EAAE,uBAAAL,KAAK;AAAA,WAAGA,KAAK,CAACE,UAAT;AAAA,GADR;AAEZI,EAAAA,mBAAmB,EAAE,6BAAAN,KAAK;AAAA,WAAGA,KAAK,CAACC,QAAT;AAAA,GAFd;AAGZM,EAAAA,mBAAmB,EAAE,6BAAAP,KAAK;AAAA,WAAIA,KAAK,CAACG,QAAV;AAAA;AAHd,CAAhB;;AAMA,IAAMK,OAAO,uBACRT,uBADQ,EACkB,gBAAaU,YAAb,EAA8B;AAAA,MAA3BC,MAA2B,QAA3BA,MAA2B;AACrDA,EAAAA,MAAM,CAACX,uBAAD,EAA0BU,YAA1B,CAAN;AACH,CAHQ,CAAb;;AAMA,IAAME,SAAS,uBACVZ,uBADU,EACgB,UAACC,KAAD,EAAQS,YAAR,EAAyB;AAChDT,EAAAA,KAAK,CAACY,MAAN,GAAeH,YAAY,CAACI,QAAb,CAAsBC,EAArC;AACAd,EAAAA,KAAK,CAACe,QAAN,GAAiBN,YAAY,CAACR,QAA9B;AACAD,EAAAA,KAAK,CAACG,QAAN,GAAiBM,YAAY,CAACN,QAA9B;AACH,CALU,CAAf;;AAQA,eAAe;AACXH,EAAAA,KAAK,EAALA,KADW;AAEXI,EAAAA,OAAO,EAAPA,OAFW;AAGXI,EAAAA,OAAO,EAAPA,OAHW;AAIXG,EAAAA,SAAS,EAATA;AAJW,CAAf","sourcesContent":["import {\n    SET_CUSTOMER_USER_STATE\n} from \"../actions/customerUser\"\n\nconst state = {\n    personId: 0,\n    customerId: 0,\n    userName: \"\"\n};\n\nconst getters = {\n    getCustomerId: state=> state.customerId,\n    getCustomerPersonId: state=> state.personId,\n    getCustomerUserName: state => state.userName,\n};\n\nconst actions = {\n    [SET_CUSTOMER_USER_STATE]: ({ commit }, customerUser) => {\n        commit(SET_CUSTOMER_USER_STATE, customerUser);\n    }\n};\n\nconst mutations = {\n    [SET_CUSTOMER_USER_STATE]: (state, customerUser) => {\n        state.userId = customerUser.customer.id;\n        state.userType = customerUser.personId;\n        state.userName = customerUser.userName;\n    }\n};\n\nexport default {\n    state,\n    getters,\n    actions, \n    mutations\n};"]}]}